/** Declaration file generated by dts-gen */

export = Compute;

declare class Compute {
    constructor(...args: any[]);

    createFirewall(...args: any[]): any;

    createHealthCheck(...args: any[]): any;

    createImage(...args: any[]): any;

    createNetwork(...args: any[]): any;

    createRule(...args: any[]): any;

    createService(...args: any[]): any;

    execAfterOperation_(...args: any[]): void;

    firewall(...args: any[]): void;

    getAddresses(...args: any[]): any;

    getAddressesStream(args: any): any;

    getAddresses_(...args: any[]): void;

    getAutoscalers(...args: any[]): any;

    getAutoscalersStream(args: any): any;

    getAutoscalers_(...args: any[]): void;

    getDisks(...args: any[]): any;

    getDisksStream(args: any): any;

    getDisks_(...args: any[]): void;

    getFirewalls(...args: any[]): any;

    getFirewallsStream(args: any): any;

    getFirewalls_(...args: any[]): void;

    getHealthChecks(...args: any[]): any;

    getHealthChecksStream(args: any): any;

    getHealthChecks_(...args: any[]): void;

    getImages(...args: any[]): any;

    getImagesStream(args: any): any;

    getImages_(...args: any[]): void;

    getInstanceGroups(...args: any[]): any;

    getInstanceGroupsStream(args: any): any;

    getInstanceGroups_(...args: any[]): void;

    getMachineTypes(...args: any[]): any;

    getMachineTypesStream(args: any): any;

    getMachineTypes_(...args: any[]): void;

    getNetworks(...args: any[]): any;

    getNetworksStream(args: any): any;

    getNetworks_(...args: any[]): void;

    getOperations(...args: any[]): any;

    getOperationsStream(args: any): any;

    getOperations_(...args: any[]): void;

    getRegions(...args: any[]): any;

    getRegionsStream(args: any): any;

    getRegions_(...args: any[]): void;

    getRules(...args: any[]): any;

    getRulesStream(args: any): any;

    getRules_(...args: any[]): void;

    getServices(...args: any[]): any;

    getServicesStream(args: any): any;

    getServices_(...args: any[]): void;

    getSnapshots(...args: any[]): any;

    getSnapshotsStream(args: any): any;

    getSnapshots_(...args: any[]): void;

    getSubnetworks(...args: any[]): any;

    getSubnetworksStream(args: any): any;

    getSubnetworks_(...args: any[]): void;

    getVMs(...args: any[]): any;

    getVMsStream(args: any): any;

    getVMs_(...args: any[]): void;

    getZones(...args: any[]): any;

    getZonesStream(args: any): any;

    getZones_(...args: any[]): void;

    healthCheck(...args: any[]): void;

    image(...args: any[]): void;

    network(...args: any[]): void;

    operation(...args: any[]): void;

    project(...args: any[]): void;

    region(...args: any[]): void;

    rule(...args: any[]): void;

    service(...args: any[]): void;

    snapshot(...args: any[]): void;

    zone(...args: any[]): void;

}

declare namespace Compute {
    class Firewall {
        constructor(...args: any[]);

        delete(...args: any[]): any;

        setMetadata(...args: any[]): any;

        static defaultMaxListeners: number;

        static init(): void;

        static listenerCount(emitter: any, type: any): any;

        static once(emitter: any, name: any): any;

        static usingDomains: boolean;

    }

    class HealthCheck {
        constructor(...args: any[]);

        delete(...args: any[]): any;

        setMetadata(...args: any[]): any;

        static defaultMaxListeners: number;

        static init(): void;

        static listenerCount(emitter: any, type: any): any;

        static once(emitter: any, name: any): any;

        static usingDomains: boolean;

    }

    class Image {
        constructor(...args: any[]);

        delete(...args: any[]): any;

        static defaultMaxListeners: number;

        static init(): void;

        static listenerCount(emitter: any, type: any): any;

        static once(emitter: any, name: any): any;

        static usingDomains: boolean;

    }

    class Network {
        constructor(...args: any[]);

        createFirewall(...args: any[]): any;

        createSubnetwork(...args: any[]): any;

        delete(...args: any[]): any;

        firewall(...args: any[]): void;

        getFirewalls(...args: any[]): any;

        getFirewallsStream(...args: any[]): void;

        getSubnetworks(...args: any[]): any;

        getSubnetworksStream(...args: any[]): void;

        static defaultMaxListeners: number;

        static formatName_(...args: any[]): void;

        static init(): void;

        static listenerCount(emitter: any, type: any): any;

        static once(emitter: any, name: any): any;

        static usingDomains: boolean;

    }

    class Operation {
        constructor(...args: any[]);

        getMetadata(...args: any[]): any;

        poll_(...args: any[]): void;

        static defaultMaxListeners: number;

        static init(): void;

        static listenerCount(emitter: any, type: any): any;

        static once(emitter: any, name: any): any;

        static usingDomains: boolean;

    }

    class Region {
        constructor(...args: any[]);

        address(...args: any[]): void;

        createAddress(...args: any[]): any;

        createRule(...args: any[]): any;

        createSubnetwork(...args: any[]): any;

        getAddresses(...args: any[]): any;

        getAddressesStream(args: any): any;

        getAddresses_(...args: any[]): void;

        getOperations(...args: any[]): any;

        getOperationsStream(args: any): any;

        getOperations_(...args: any[]): void;

        getRules(...args: any[]): any;

        getRulesStream(args: any): any;

        getRules_(...args: any[]): void;

        getSubnetworks(...args: any[]): any;

        getSubnetworksStream(args: any): any;

        getSubnetworks_(...args: any[]): void;

        operation(...args: any[]): void;

        rule(...args: any[]): void;

        subnetwork(...args: any[]): void;

        static defaultMaxListeners: number;

        static init(): void;

        static listenerCount(emitter: any, type: any): any;

        static once(emitter: any, name: any): any;

        static usingDomains: boolean;

    }

    class Rule {
        constructor(...args: any[]);

        delete(...args: any[]): any;

        setTarget(...args: any[]): any;

        static defaultMaxListeners: number;

        static init(): void;

        static listenerCount(emitter: any, type: any): any;

        static once(emitter: any, name: any): any;

        static usingDomains: boolean;

    }

    class Service {
        constructor(...args: any[]);

        delete(...args: any[]): any;

        getHealth(...args: any[]): any;

        setMetadata(...args: any[]): any;

        static defaultMaxListeners: number;

        static init(): void;

        static listenerCount(emitter: any, type: any): any;

        static once(emitter: any, name: any): any;

        static usingDomains: boolean;

    }

    class Snapshot {
        constructor(...args: any[]);

        delete(...args: any[]): any;

        static defaultMaxListeners: number;

        static init(): void;

        static listenerCount(emitter: any, type: any): any;

        static once(emitter: any, name: any): any;

        static usingDomains: boolean;

    }

    class Zone {
        constructor(...args: any[]);

        autoscaler(...args: any[]): void;

        createAutoscaler(...args: any[]): any;

        createDisk(...args: any[]): any;

        createHttpServerFirewall_(...args: any[]): void;

        createHttpsServerFirewall_(...args: any[]): void;

        createInstanceGroup(...args: any[]): any;

        createVM(...args: any[]): any;

        disk(...args: any[]): void;

        getAutoscalers(...args: any[]): any;

        getAutoscalersStream(args: any): any;

        getAutoscalers_(...args: any[]): void;

        getDisks(...args: any[]): any;

        getDisksStream(args: any): any;

        getDisks_(...args: any[]): void;

        getInstanceGroupManagers(...args: any[]): any;

        getInstanceGroupManagers_(...args: any[]): void;

        getInstanceGroups(...args: any[]): any;

        getInstanceGroupsStream(args: any): any;

        getInstanceGroups_(...args: any[]): void;

        getMachineTypes(...args: any[]): any;

        getMachineTypesStream(args: any): any;

        getMachineTypes_(...args: any[]): void;

        getOperations(...args: any[]): any;

        getOperationsStream(args: any): any;

        getOperations_(...args: any[]): void;

        getVMs(...args: any[]): any;

        getVMsStream(args: any): any;

        getVMs_(...args: any[]): void;

        instanceGroup(...args: any[]): void;

        instanceGroupManager(...args: any[]): void;

        machineType(...args: any[]): void;

        operation(...args: any[]): void;

        vm(...args: any[]): void;

        static defaultMaxListeners: number;

        static init(): void;

        static listenerCount(emitter: any, type: any): any;

        static once(emitter: any, name: any): any;

        static usingDomains: boolean;

    }

    namespace Firewall {
        class EventEmitter {
            constructor();

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static defaultMaxListeners: number;

            static init(): void;

            static listenerCount(emitter: any, type: any): any;

            static once(emitter: any, name: any): any;

            static usingDomains: boolean;

        }

    }

    namespace HealthCheck {
        class EventEmitter {
            constructor();

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static defaultMaxListeners: number;

            static init(): void;

            static listenerCount(emitter: any, type: any): any;

            static once(emitter: any, name: any): any;

            static usingDomains: boolean;

        }

    }

    namespace Image {
        class EventEmitter {
            constructor();

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static defaultMaxListeners: number;

            static init(): void;

            static listenerCount(emitter: any, type: any): any;

            static once(emitter: any, name: any): any;

            static usingDomains: boolean;

        }

    }

    namespace Network {
        class EventEmitter {
            constructor();

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static defaultMaxListeners: number;

            static init(): void;

            static listenerCount(emitter: any, type: any): any;

            static once(emitter: any, name: any): any;

            static usingDomains: boolean;

        }

    }

    namespace Operation {
        class EventEmitter {
            constructor();

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static defaultMaxListeners: number;

            static init(): void;

            static listenerCount(emitter: any, type: any): any;

            static once(emitter: any, name: any): any;

            static usingDomains: boolean;

        }

    }

    namespace Project {
        class EventEmitter {
            constructor();

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static defaultMaxListeners: number;

            static init(): void;

            static listenerCount(emitter: any, type: any): any;

            static once(emitter: any, name: any): any;

            static usingDomains: boolean;

        }

        const defaultMaxListeners: number;

        const usingDomains: boolean;

        function init(): void;

        function listenerCount(emitter: any, type: any): any;

        function once(emitter: any, name: any): any;

    }

    namespace Region {
        class EventEmitter {
            constructor();

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static defaultMaxListeners: number;

            static init(): void;

            static listenerCount(emitter: any, type: any): any;

            static once(emitter: any, name: any): any;

            static usingDomains: boolean;

        }

    }

    namespace Rule {
        class EventEmitter {
            constructor();

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static defaultMaxListeners: number;

            static init(): void;

            static listenerCount(emitter: any, type: any): any;

            static once(emitter: any, name: any): any;

            static usingDomains: boolean;

        }

    }

    namespace Service {
        class EventEmitter {
            constructor();

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static defaultMaxListeners: number;

            static init(): void;

            static listenerCount(emitter: any, type: any): any;

            static once(emitter: any, name: any): any;

            static usingDomains: boolean;

        }

    }

    namespace Snapshot {
        class EventEmitter {
            constructor();

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static defaultMaxListeners: number;

            static init(): void;

            static listenerCount(emitter: any, type: any): any;

            static once(emitter: any, name: any): any;

            static usingDomains: boolean;

        }

    }

    namespace Zone {
        class EventEmitter {
            constructor();

            addListener(type: any, listener: any): any;

            emit(type: any, args: any): any;

            eventNames(): any;

            getMaxListeners(): any;

            listenerCount(type: any): any;

            listeners(type: any): any;

            off(type: any, listener: any): any;

            on(type: any, listener: any): any;

            once(type: any, listener: any): any;

            prependListener(type: any, listener: any): any;

            prependOnceListener(type: any, listener: any): any;

            rawListeners(type: any): any;

            removeAllListeners(type: any, ...args: any[]): any;

            removeListener(type: any, listener: any): any;

            setMaxListeners(n: any): any;

            static EventEmitter: any;

            static defaultMaxListeners: number;

            static init(): void;

            static listenerCount(emitter: any, type: any): any;

            static once(emitter: any, name: any): any;

            static usingDomains: boolean;

        }

    }

}


